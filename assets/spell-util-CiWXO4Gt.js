import{s as f,y as E,w as c,z as N,p as m,x as ae,t as Y,U as oe,i as ie,k as re,j as x,a3 as j}from"./index-BumLs4NH.js";import{o as _,d as w,c as se,f as d,u as B,a as h,s as J,C as T,r as $,t as G,v as le,w as L,b as F,l as M,I as ue}from"./misc-util-DNiZ3Gxk.js";let U;async function fe(e,t){const a=Se(t);e(E.updateMana({value:a,change:"REMOVE"})),_(e,"quickTimeEventModal");const n=await ye();if(e(E.initiativeTracker({change:"REMOVE"})),n)e(c.updateLogs({change:"ADD",text:`Casting ${t.name}`}));else{e(c.updateLogs({change:"ADD",text:"Cast Failed!"}));return}e(N.changeUi({element:"modalIsVisible",visible:!1}));const i=f.getState().combat.order,o=i.filter(l=>l.identifier==="ENEMY"),s=i.findIndex(l=>l.id==="Player"),r=i[s];let u;if(w("Arcane Shield")){const l=J.ARCANE_SHIELD;l(e,t,r,"ADD",null)}switch(t.spellTarget){case"ENEMY":{if(e(c.updateLogs({change:"CLEAR"})),e(c.updateLogs({change:"PAUSE"})),t.spellType==="HIT"){e(c.updateLogs({change:"ADD",text:"Choose an enemy!"})),u=await I("ENEMIES"),e(c.updateLogs({change:"CLEAR"})),e(c.updateLogs({change:"UNPAUSE"}));const l=H(r,t,r.stats.arcana.spellPower);t.name==="Chain Lightning"?ge(e,u,l):h(e,u,"DAMAGE",l,t.damageType)}if(t.spellType==="DEBUFF"&&t.name==="Dispel Magic"){let l=[];for(let g=0;g<u.statusEffects.length;g++)u.statusEffects[g].type==="BUFF"&&l.push([u.statusEffects[g].type]);if(l.length>0){const g=Math.floor(Math.random()*l.length),R=l[g];d(e,u,"REMOVE",R)}}}break;case"ALLY":{if(e(c.updateLogs({change:"CLEAR"})),e(c.updateLogs({change:"PAUSE"})),e(c.updateLogs({change:"ADD",text:"Choose a hero!"})),t.spellType==="HEAL"){u=await I("ALLIES");let l=t.healValue;l+=r.stats.arcana.spellPower,h(e,u,"HEAL",l,null)}if(t.spellType==="BUFF"){u=await I("ALLIES");const l=t.statusEffect,g=w("Dual Casting");if((t.school==="Novice Abjuration"||t.school==="Apprentice Abjuration")&&g>1){const R=g*.333,D=Math.random();if(R>D-.01){const V=f.getState().combat.order.filter(ne=>ne.id!==u.id),te=Math.floor(Math.random()*V.length);d(e,V[te],"ADD",l)}}d(e,u,"ADD",l)}}break;case"ENEMIES":{if(t.spellType==="HIT"){const l=H(r,t,r.stats.arcana.spellPower);t.name==="Fireball"&&ce(e,o,l),t.name==="Meteor"&&me(e,o,l)}t.spellType==="DEBUFF"&&t.name==="Blizzard"&&de(e,o)}break;case"ALLIES":t.name==="Protect From Evil"&&Ae(e,r,t);break;case"SELF":t.name==="Storm Sphere"&&Ee(e,r);break;case"ALL":break;case"CONJURE":if(t.spellType&&t.spellType==="SUMMON"){if(he(t)){const R=t.name.replace(/summon/i,"").trim();e(E.removeCharacter({character:{id:R}}))}const l=se(t.summon.stats);let g={...t.summon,stats:l,damageDisplay:[]};e(E.addCharacter({character:g})),d(e,g,"ADD",t.statusEffect),B(e,g.id),e(E.updateHealth({id:g.id,change:"HEAL",value:999}))}break;default:return}t.audio&&m(...t.audio),e(c.updateLogs({change:"UNPAUSE"}))}function ce(e,t,a){for(let n=0;n<t.length;n++)h(e,t[n],"DAMAGE",a,"FIRE")}function ge(e,t,a){let n=!0;const o=f.getState().combat.order.filter(r=>r.identifier==="ENEMY"),s=[t.id];for(h(e,t,"DAMAGE",a,"LIGHTNING");n;)if(Math.random()<.5)n=!1;else{const u=o.filter(A=>!s.includes(A.id));if(u.length===0)n=!1;else{const A=u[Math.floor(Math.random()*u.length)];h(e,A,"DAMAGE",a,"LIGHTNING"),s.push(A.id)}}}function de(e,t){for(let a=0;a<t.length;a++)d(e,t[a],"ADD",T.CHILLED)}function Ee(e,t){const a=f.getState().player.stats.arcana.spellPower,n={name:"Storm Sphere",display:!0,image:"/assets/images/spellbook/evocation/storm-sphere.jpg",type:"BUFF",effect:[`All enemies who Attack you are dealt ${Math.round(a/2)} Lightning damage.`],durationType:"ROOM",duration:1,reset:1,stats:{},function:"STORM_SPHERE"};d(e,t,"ADD",n),m(!1,"magic","stormSphere")}function me(e,t,a){for(let n=0;n<t.length;n++)h(e,t[n],"DAMAGE",a,"FIRE"),d(e,t[n],"ADD",T.BURNING)}function Ae(e,t,a){e(ae.removeThreat(10)),d(e,t,"ADD",a.statusEffect)}function Se(e){let t=e.manaCost;const a=w("Evoker"),n=w("Abjurer"),i=["Novice Evocation","Apprentice Evocation","Adept Evocation","Expert Evocation"],o=["Novice Abjuration","Apprentice Abjuration","Adept Abjuration","Expert Abjuration"];return a&&i.includes(e.school)&&(t-=a*2),n&&o.includes(e.school)&&(t-=n*2),t}function he(e){const t=f.getState().combat.order,n=e.name.replace(/summon/i,"").trim();return t.some(o=>o.name===n)}async function ye(){return new Promise(e=>{U=e})}function Fe(e,t){U&&(e(N.changeUi({element:"modalIsVisible",visible:!1})),U(t),U=null)}let Re="";function De(e){Re=e}async function q(e,t){const a=f.getState().ui.dashboardIsVisible;let n;switch(a?n=f.getState().player:(n=f.getState().combat.order.find(o=>o.id==="Player"),e(E.initiativeTracker({change:"REMOVE"}))),t.type){case"EQUIPMENT":a||(n.inventory.attunedItems.includes(t)?(e(E.changePlayerAttunement({item:t,change:"REMOVE"})),d(e,n,"REMOVE",t),m(!1,"ui","unattune")):n.inventory.attunedItems.length<5&&(e(E.changePlayerAttunement({item:t,change:"ADD"})),d(e,n,"ADD",t),m(!1,"ui","magicStone",.2))),a&&(n.inventory.attunedItems.includes(t)?(e(Y.changeAttunement({item:t,change:"REMOVE"})),d(e,n,"REMOVE",t),m(!1,"ui","unattune")):n.inventory.attunedItems.length<5&&(e(Y.changeAttunement({item:t,change:"ADD"})),d(e,n,"ADD",t),m(!1,"ui","magicStone",.2)));break;case"CONSUMABLE":{if(a)return;const i=K(t.name),o=$[i];if(t.name!=="Skeleton Key"&&t.name!=="Laughing Coffin Coin"&&t.name!=="Magic Rope"&&t.name!=="Trap Disarming Kit"&&t.name!=="Smoke Bomb"){if(o){if(t.target&&t.target==="PLAYER"&&(o(e,n),e(N.changeUi({element:"modalIsVisible",visible:!1}))),!t.target){e(c.updateLogs({change:"CLEAR"})),e(c.updateLogs({change:"PAUSE"})),e(N.changeUi({element:"modalIsVisible",visible:!1})),e(c.updateLogs({change:"ADD",text:"Choose an ally!"}));const s=await I("ALLIES");e(c.updateLogs({change:"CLEAR"})),e(c.updateLogs({change:"UNPAUSE"})),o(e,s)}}else console.log("NO ITEM FUNCTION FOUND",t);t.audio&&m(...t.audio),e(E.changePlayerInventory({item:t,change:"REMOVE"}))}}break;case"MISC":{if(a)return;const i=K(t.name),o=$[i];o&&o(e,t),t.audio&&m(...t.audio)}break}B(e,n.id)}function K(e){return e.replace(/'/g,"").toUpperCase().replace(/\s+/g,"_")}const Te={RADIANT_AURA:e=>{const t=f.getState().combat.order,a={name:"Radiant Aura",display:!0,image:"/assets/images/status-effect/radiant-aura.jpg",type:"DEBUFF",description:"The undead is weakened in the presence of Siggurd.",effect:["-1 Defense"],stats:{agility:{maxHealth:-1}},function:!1};for(let n=0;n<t.length;n++)t[n].identifier==="ENEMY"&&t[n].type==="UNDEAD"&&d(e,t[n],"ADD",a)},LOOT_SENSE:()=>{},BURNING_DEVOTION:(e,t)=>{Math.random()>.9&&d(e,t,"ADD",T.BURNING)},RATTLE_OF_WAR:e=>{const t=f.getState().combat.order,a={name:"Rattle of War",display:!0,image:"/assets/images/status-effect/rattle-of-war.jpg",type:"BUFF",description:"The undead's strength grows in the presence of a skeletal warrior.",effect:["+4 Attack"],stats:{strength:{attack:4}},function:!1};for(let n=0;n<t.length;n++)t[n].identifier==="ENEMY"&&t[n].type==="UNDEAD"&&t[n].name!=="Skeletal Warrior"&&d(e,t[n],"ADD",a)}};function Q(e,t,a,n){if(!t||!f.getState().combat.order.find(r=>r.id===t.id)||!("passive"in t))return;const s=Te[t.passive.function];switch(a){case"OUTSIDE_COMBAT":if("type"in t.passive&&t.passive.when==="OUTSIDE_COMBAT")return s();break;case"START_OF_ROUND":"when"in t.passive&&t.passive.when==="START_OF_ROUND"&&s(e,t);break;case"DURING_COMBAT":"when"in t.passive&&t.passive.when==="DURING_COMBAT"&&s(e,n);break;case"AFTER_COMBAT":"when"in t.passive&&t.passive.when==="AFTER_COMBAT"&&s(e,t);break;default:return}}let C,k,v;async function Z(e,t=0){let a=f.getState().combat.order;f.getState().dungeon,await O(e,"START_OF_ROUND");for(let n=0;n<a.length;n++){if(await p(e,t,!1))return;let o=f.getState().combat.order;const s=o.findIndex(g=>g.id==="Player"),r=o[s],u=[];for(let g=0;g<o.length;g++)o[g].identifier==="ENEMY"&&u.push(o[g]);let A=o[n];if(!A)continue;o=f.getState().combat.order;let l=o.find(g=>g.id===A.id);if(await b(1e3),u.length>0&&r.currentHealth>=0&&l.currentHealth>0){if(e(E.initiativeTracker({id:l.id,change:"ADD"})),await b(1e3),O(e,"START_OF_TURN",l),L(l,"Stunned"))continue;if(o[n].identifier==="PLAYER"){let R=!1;for(;!R;){let D;switch(L(r,"Restrained")?D="GUARD":D=await be(),D){case"CAST SPELL":{const S=await W();if(S===null)continue;S&&await fe(e,S)}break;case"ATTACK":{e(E.initiativeTracker({change:"REMOVE"})),e(c.updateLogs({change:"CLEAR"})),e(c.updateLogs({change:"PAUSE"})),e(c.updateLogs({change:"ADD",text:"Choose a target!"}));const S=await I("ENEMIES");e(c.updateLogs({change:"CLEAR"})),e(c.updateLogs({change:"UNPAUSE"})),P(e,l,S)}break;case"GUARD":d(e,r,"ADD",T.GUARD),m(!1,"guard","eventShield",.6),e(E.updateDamageDisplay({id:l.id,content:{item:"Guard",style:""}}));break;case"USE ITEM":{const S=await W();if(S===null)continue;await q(e,S)}break}R=!0}}if(o[n].identifier==="HERO"||o[n].identifier==="ENEMY"){if(l.currentHealth>0&&console.log("TURN",o[n]),o=f.getState().combat.order,!o.some(S=>S.identifier==="ENEMY"))continue;await b(1e3);let D;switch(L(l,"Restrained")?D="GUARD":D=Ce(l),D){case"ATTACK":{const S=ke(l);P(e,l,S)}break;case"GUARD":d(e,l,"ADD",T.GUARD),m(!1,"guard","eventShield",.6),e(E.updateDamageDisplay({id:l.id,content:{item:"Guard",style:""}}));break;case"ABILITY":Le(e,l);break}}if(O(e,"END_OF_TURN",l),await p(e,t,!1))return}}O(e,"END_OF_ROUND"),await p(e,t,!0)}async function be(){return new Promise(e=>{C=e})}function pe(e){C&&(C(e),C=null)}async function W(){return new Promise(e=>{v=e})}function Me(e){v&&(v(e),v=null)}async function I(e){return De(e),new Promise(t=>{k=t})}function _e(e){k&&(k(e),k=null)}function X(e,t,a){let n=t.stats.agility.hitChance,i=a.stats.agility.defense,o=Ie(n);if(a.id==="Player"&&(o-=M(e,"Spirit Veil Cloak")),L(a,"Storm Sphere")){const s=J.STORM_SPHERE;s(e,t)}return o>i}function H(e,t,a){if(t){const n=Math.floor(Math.random()*t.baseDamage)+a+1;return n<t.baseDamage?t.baseDamage:n}else{const n=Math.floor(Math.random()*e.stats.strength.attack)+1;return n<Math.floor(e.stats.strength.attack/2)?Math.floor(e.stats.strength.attack/2):n}}function Ie(e=0){return Math.floor(Math.random()*21)+e}async function p(e,t,a){const n=f.getState().dungeon.danger,i=f.getState().ui.modalIsVisible.roomSummaryModal;if(!n||i)return;let o=f.getState().combat.order;const s=o.find(A=>A.identifier==="PLAYER");if(!s.currentHealth>0||!s)return _(e,"defeatedModal"),!0;const r=await Ne(e,t);await b(1e3),o=f.getState().combat.order;const u=o.some(A=>A.identifier==="ENEMY");if(u&&a){Z(e,r);return}return!u&&r.length===0&&(e(E.initiativeTracker({change:"REMOVE"})),await oe(e,"after"),await b(1e3),console.log("COMBAT ENDED"),_(e,"roomSummaryModal")),!1}async function b(e){return new Promise(t=>setTimeout(t,e))}async function Ge(e,t){const a=f.getState().combat.order;let n=[...t],i=[];if(n.length>3){const r=n.length-3;r>0&&(i=n.splice(3,r))}for(let r=0;r<a.length;r++)G(e,a[r],"BEFORE COMBAT");const o=f.getState().combat.order,s=[...n,...o];console.log(s),e(E.setInitiative({characters:s}));for(let r=0;r<s.length;r++)B(e,s[r].id),s[r].identifier==="ENEMY"&&e(E.updateHealth({change:"HEAL",value:999,id:s[r].id}));await b(1e3),le(),e(c.updateLogs({change:"UNPAUSE"})),e(c.updateLogs({change:"CLEAR"})),Z(e,i)}async function O(e,t,a){const n=f.getState().combat.order;switch(t){case"START_OF_ROUND":{for(let i=0;i<n.length;i++)Q(e,n[i],"START_OF_ROUND");e(c.updateLogs({change:"UNPAUSE"})),e(c.updateLogs({change:"CLEAR"})),M(e,"Sunstone")}break;case"START_OF_TURN":G(e,a,"START TURN"),F(e,a.id,"DECREMENT","ROUND"),F(e,a.id,"REMOVE");break;case"END_OF_TURN":e(E.initiativeTracker({change:"REMOVE"})),G(e,a,"END TURN"),Ue(e,a);break;case"END_OF_ROUND":for(let i=0;i<n.length;i++)(n[i].identifier==="HERO"||n[i].identifier==="PLAYER")&&F(e,n[i].id,"END");break}}function P(e,t,a){if(X(e,t,a)){t.audio&&m(...t.audio.attack),Q(e,t,"DURING_COMBAT",a);let i=H(t);t.id==="Player"&&(i+=M(e,"Ritual Blade",a),i+=M(e,"Revenants Rage")),a.id==="Player"&&M(e,"Cursed Mirror",t,i),e(c.updateLogs({change:"ADD",text:`${t.name} Attacks ${a.name}!`})),h(e,a,"DAMAGE",i,null)}else m(!0,"miss",null,.7),e(E.updateDamageDisplay({id:a.id,content:{item:"Miss",style:""}}))}async function Ne(e,t){if(t.length===0||typeof t[Symbol.iterator]!="function")return[];const n=f.getState().combat.order.filter(s=>s.identifier==="ENEMY");let i=[...t],o=[];for(;n.length<3&&i.length>0;)e(E.addCharacter({character:i[0]})),i.shift(),n.push(i[0]);return o=i,o}const Oe={HOLY_SMITE:(e,t)=>{const a=z("Siggurd");let n=a.stats.strength.attack;n+=a.stats.arcana.spellPower*2,h(e,t,"DAMAGE",n)},DIVINE_GUARDIAN:(e,t)=>{d(e,t,"ADD",{name:"Divine Guardian",display:!0,image:"",type:"BUFF",description:"All damage taken will be redirected to Siggurd instead.",effect:["Damage -100%"],durationType:"ROUND",duration:3,reset:3,stats:{}})},VENOM_STRIKE:(e,t)=>{const a=f.getState().combat.order,n=f.getState().combat.isCharacterTurn,o=a.find(s=>s.id===n).stats.strength.attack;m(!1,"abilities","venomStrike"),h(e,t,"DAMAGE",o,"POISON"),d(e,t,"ADD",T.POISONED)},SMOKE_BOMB:(e,t)=>{const a={name:"Smoke Bomb",display:!0,image:"",type:"DEBUFF",description:"Riven's smoke bomb obscures the enemies vision.",effect:["Hit Chance -2"],durationType:"ROUND",duration:3,reset:3,stats:{agility:{hitChance:-2}}};for(let n=0;n<t.length;n++)d(e,t[n],"ADD",a)},CLEANSING_FLAME:(e,t,a)=>{const n=z("Liheth");a&&d(e,t,"REMOVE",a),m(!1,"abilities","cleansingFlame"),h(e,t,"HEAL",n.stats.arcana.spellPower)},UNDYING_FLAME:(e,t)=>{const a={name:"Undying Flame",display:!0,image:"",type:"BUFF",description:"Upon dropping to 0HP the target will not die, but instead come back to live with 50% its max HP.",effect:[""],durationType:"ROOM",duration:3,reset:3,stats:{}};m(!1,"abilities","undyingFlame"),d(e,t,"ADD",a)},MULTI_SHOT:(e,t,a)=>{if(X(e,t,a)){m(!1,"bowAttack","bulletsImpactFlesh26");const i=H(t);h(e,a,"DAMAGE",i)}else m(!1,"bowAttack","bulletsPassBy4"),e(E.updateDamageDisplay({id:a.id,content:{item:"Miss",style:""}}))},CHILL_OF_THE_GRAVE:(e,t,a)=>{const n=6+t.stats.arcana.spellPower;h(e,a,"DAMAGE",n,"ICE"),m(!1,"magic","frostbite"),d(e,a,"ADD",T.CHILLED)},HAUNT:(e,t)=>{m(!1,"statusEffects","haunted"),d(e,t,"ADD",T.HAUNTED)}};function z(e){return f.getState().combat.order.find(a=>a.id===e)}function Le(e,t){const{abilityA:a}=ee(t);let n=a?"abilityA":"abilityB";const i=Oe[t[n].function];switch(t[n].focus){case"HEROES":{if(t.name==="Siggurd"){const o=y("HEROES");let r=o.find(u=>u.id==="Player");for(let u=0;u<o.length;u++)r.currentHealth>o[u].currentHealth&&o[u].name!=="Siggurd"&&(r=o[u]);i(e,r)}if(t.name==="Liheth"){const o=y("HEROES");let s=[];for(let r=0;r<o.length;r++)if(o[r].statusEffects.length>0)for(let u=0;u<o[r].statusEffects.length;u++)o[r].statusEffects[u].type==="DEBUFF"&&s.push({target:o[r],statusEffect:o[r].statusEffects[u]});if(s.length>0){const r=Math.floor(Math.random()*s.length),{target:u,statusEffect:A}=s[r];i(e,u,A)}else{const r=Math.floor(Math.random()*o.length);i(e,o[r])}}if(t.name==="Skeletal Archer"){const o=y("HEROES"),s=Math.floor(Math.random()*o.length),r=Math.floor(Math.random()*o.length);i(e,t,o[s]),i(e,t,o[r])}if(t.name==="Skeletal Mage"){const o=y("HEROES"),s=Math.floor(Math.random()*o.length);i(e,t,o[s])}if(t.name==="Shadow"){const o=y("HEROES"),s=Math.floor(Math.random()*o.length);if(o[s].statusEffects.some(r=>r.name==="Haunted")){P(e,t,o[s]);return}i(e,o[s])}}break;case"ENEMIES":{const o=y("ENEMIES");i(e,o)}break;case"LOWEST_HEALTH":{let o;t.name==="Riven"&&(o=y("ENEMIES")),t.name==="Liheth"&&(o=y("HEROES")),t.name==="Thief"&&(o=y("HEROES"));let s=o[0];for(let r=0;r<o.length;r++)s.currentHealth>o[r].currentHealth&&(s=o[r]);i(e,s)}break;case"HIGHEST_HEALTH":if(t.name==="Siggurd"){const o=y("ENEMIES");let s=o[0];for(let r=0;r<o.length;r++)o[r].currentHealth>s.currentHealth&&(s=o[r]);i(e,s)}break}e(c.updateLogs({change:"ADD",text:`${t.name} uses ${t[n].name}!`})),e(E.updateCooldown({id:t.id,ability:n,change:"RESET"}))}function ee(e){let t=!1,a=!1;return"abilityA"in e&&"cooldown"in e.abilityA&&e.abilityA.cooldown===0&&(t=!0),"abilityB"in e&&"cooldown"in e.abilityB&&e.abilityB.cooldown===0&&(a=!0),{abilityA:t,abilityB:a}}function Ue(e,t){(t.identifier==="HERO"&&t.level>=3||t.identifier==="ENEMY")&&"abilityA"in t&&"cooldown"in t.abilityA&&t.abilityA.cooldown>0&&e(E.updateCooldown({id:t.id,ability:"abilityA",change:"DECREMENT"})),(t.identifier==="HERO"&&t.level>=6||t.identifier==="ENEMY")&&"abilityB"in t&&"cooldown"in t.abilityB&&t.abilityB.cooldown>0&&e(E.updateCooldown({id:t.id,ability:"abilityB",change:"DECREMENT"}))}function y(e){const t=f.getState().combat.order;let a=[];if(e==="ENEMIES")for(let n=0;n<t.length;n++)t[n].identifier==="ENEMY"&&a.push(t[n]);else if(e==="HEROES")for(let n=0;n<t.length;n++)(t[n].identifier==="HERO"||t[n].identifier==="PLAYER")&&a.push(t[n]);return a}function Ce(e){const{abilityA:t,abilityB:a}=ee(e);switch(e.behavior){case"ERRATIC":const n=["ATTACK","GUARD","ABILITY"];let i;return t||a?i=Math.floor(Math.random()*3):i=Math.floor(Math.random()*2),n[i];case"ASTUTE":case"DOMINANT":return t||a?"ABILITY":e.currentHealth>e.stats.strength.maxHealth*.3?"ATTACK":"GUARD";case"RUTHLESS":case"AGGRESSIVE":return t||a?"ABILITY":"ATTACK";case"SUPPORTIVE":return t||a?"ABILITY":e.currentHealth>e.stats.strength.maxHealth*.5?"ATTACK":"GUARD";case"DEFENSIVE":return t||a?"ABILITY":"GUARD"}}function ke(e){let t=ve(e);switch(e.behavior){case"ERRATIC":const a=Math.floor(Math.random()*t.length);return t[a];case"ASTUTE":{let n=t[0];for(let i=0;i<t.length;i++)t[i].stats.arcana.totalArcana>n.stats.arcana.totalArcana&&(n=t[i]);return n}case"DOMINANT":{let n=t[0];for(let i=0;i<t.length;i++)t[i].stats.strength.totalStrength>n.stats.strength.totalStrength&&(n=t[i]);return n}case"RUTHLESS":{let n=t[0];for(let i=0;i<t.length;i++)t[i].currentHealth<n.currentHealth&&(n=t[i]);return n}case"AGGRESSIVE":case"SUPPORTIVE":{const n=Math.floor(Math.random()*t.length);return t[n]}}}function ve(e){const t=f.getState().combat.order;let a=[];if(e.identifier==="HERO"||e.identifier==="PLAYER")for(let n=0;n<t.length;n++)t[n].identifier==="ENEMY"&&a.push(t[n]);else if(e.identifier==="ENEMY")for(let n=0;n<t.length;n++)(t[n].identifier==="HERO"||t[n].identifier==="PLAYER")&&a.push(t[n]);return a}const Pe={SUPPORTIVE:{description:"Focuses on supporting allies through buffing or healing."},RUTHLESS:{description:"Focuses on attacking the enemy with the lowest health."},DOMINANT:{description:"Focuses on attacking the enemy with the greatest Strength."},ASTUTE:{description:"Focuses on attacking the enemy with the greatest Arcana."},DEFENSIVE:{description:"Focuses on guarding rather than attacking."},AGGRESSIVE:{description:"Focuses on attacking at all times."},ERRATIC:{description:"Doesn't have a focus and instead performs actions randomly."}};function Be({item:e,count:t}){const a=ie(),n=re(o=>o.dungeon.danger),i=o=>{const s=f.getState().ui.itemListIsVisible;Me(o),n||q(a,o),s&&a(N.changeUi({element:"itemListIsVisible",visible:!1}))};return x.jsx(ue,{onClick:()=>i(e),style:{backgroundImage:`url(${e.image})`},children:x.jsx("span",{children:t>1?`x${t}`:""})})}const Ve={FIREBOLT:e=>`Shoot a bolt of flame at an enemy, dealing ${e} - ${e+6} Fire damage.`,FROSTBITE:e=>`Envelope an enemy in frost, dealing ${e} - ${e+8} Ice damage.`,SHOCK:e=>`Shock an enemy with electricity, dealing ${e} - ${e+10} Lightning damage.`,FIREBALL:e=>`Shoot a ball of fire that explodes, dealing ${e} to ${e+4} Fire damage to all enemies.`,CHAIN_LIGHTNING:e=>`Shoot a bolt of lighting which has a chance to leap to additional targets, dealing ${e} to ${e+14} Lightning damage to each target it hits.`,BLIZZARD:()=>"Evoke a frigid snowstorm, inflicting the Chilled condition on all enemies.",STORM_SPHERE:e=>`Surround yourself in a sphere of lightning, dealing ${Math.round(e/2)} Lightning damage to all enemies who Attack you for 1 room.`,METEOR:e=>`Rain down cataclysmic fire, inflicting the Burning condition and dealing ${e} to ${e+18} Fire damage to all enemies.`,BARK_SKIN:()=>"Give a target the durability of bark, increasing the target's Defense +1 for 3 rounds.",BARRIER:()=>"Place a magical barrier around an ally. The next instance of damage received by the target is halved and the spell ends.",BOUNDLESS:()=>"Protect an ally from being Restrained. The target gains immunity to the Restrained condition for 3 rounds.",DEATH_WARD:()=>"Place a ward on an ally protecting it from death. If the target falls below 0HP, it instead retains 1HP and the spell ends.",DISPEL_MAGIC:()=>"Dispel a random magical effect on an enemy that is making it more powerful.",PROTECT_FROM_EVIL:()=>"Place a ward the party that protects against evil. Your current threat is reduced by 10 for 3 rooms.",STONE_SKIN:()=>"Give an ally the durability of stone, increasing the target's Defense +2 for 3 rounds.",STEEL_SKIN:()=>"Give an ally the durability of steel, increasing the ally's Defense +3 for 3 rounds.",SHELL:()=>"Place a magical shell around an ally. All instances of damage received by the target are halved for 3 rounds.",INVULNERABILITY:()=>"Grant an ally invulnerability. The target cannot be damaged for 3 rounds.",CONJURE_WEAPON:()=>"Grant an ally a magical weapon, increasing the ally's Attack +2 for 3 rooms.",CONJURE_FEAST:()=>"Conjure a feast for all allies to consume, increasing their Health Regeneration +2 for 3 rooms.",SUMMON_HOUND:()=>"Summon a hound to join your party and fight alongside you. You can only have one summon active at a time.",SUMMON_KNIGHT:()=>"Summon a knight to join your party and fight alongside you. You can only have one summon active at a time.",CONJURE_KEY:()=>"Conjure a key to open locked doors.",SUMMON_DRAKE:()=>"Summon a drake to join your party and fight alongside you. You can only have one summon active at a time.",SUMMON_GOLEM:()=>"Summon a golem to join your party and fight alongside you. You can only have one summon active at a time.",CONJURE_PORTAL:()=>"Conjure a portal, allowing you to enter into an area of your choice that you've previously discovered within your current dungeon.",SUMMON_HERO:()=>"Summon a hero that is currently not in your party. You can have a maximum of 3 heroes in your party at a time."};function Ye(e){for(let t in j){const a=j[t].find(n=>n.name===e);if(a)return{...a}}return console.error(`Spell "${e}" does not exist in any school.`),null}export{Pe as B,Be as I,Fe as a,fe as b,he as c,pe as d,Me as e,_e as f,Ye as g,Ge as h,Ve as s,Re as t};
